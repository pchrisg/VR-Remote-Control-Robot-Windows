//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Robotiq3fGripperArticulated
{
    [Serializable]
    public class Robotiq3FGripperRobotOutputMsg : Message
    {
        public const string k_RosMessageName = "robotiq_3f_gripper_articulated_msgs/Robotiq3FGripperRobotOutput";
        public override string RosMessageName => k_RosMessageName;

        //  rACT: Action request (activation bit).
        //  0x0 - Decativate gripper.
        //  0x1 - Activate gripper.
        public byte rACT;
        //  rMOD: Changes the gripper grasping mode.
        //  0x0 - Basic mode.
        //  0x1 - Pinch mode.
        //  0x2 - Wide mode.
        //  0x3 - Scissor mode.
        public byte rMOD;
        //  rGTO: "Go To" action moves the gripper fingers to the requested position.
        //  0x0 - Stop.
        //  0x1 - Go to the requested position.
        public byte rGTO;
        //  rATR: Automatic release routine.
        //  0x0 - Stop.
        //  0x1 Emergency auto-release.
        public byte rATR;
        //  rGLV: Glove mode
        //  0x0 - Glove mode off
        //  0x1 - Glove mode on
        public byte rGLV;
        //  rICF: Individual Control of Fingers mode. Each finger receives its own command
        //  unless the gripper is in the Scissor Grasping Mode and the Independent Control
        //  of Scissor (rICS) is not activated.
        //  0x0 - Normal.
        //  0x1 - Enable Individual Control of Fingers A, B and C.
        public byte rICF;
        //  rICS: Individual Control of Scissor. The scissor axis moves independenly from
        //  the grasping mode. When this option is selected, the rMOD bits (grasping mode)
        //  are ignored as the scissor axis position is defined by the rPRS.
        //  0x0 - Normal.
        //  0x1 - Enable Individual Control of Scissor. Disable Mode Selection.
        public byte rICS;
        //  rPRA: Target position of the fingers (or finger A only if bit rICF is set).
        //  0x00 Minimum position (open).
        //  0xFF Maximum position (close).
        public byte rPRA;
        //  rSPA: Gripper closing or opening speed (or finger A only if bit rICF is set).
        //  Setting a speed will not initiate a motion.
        //  0x00 Minimum speed.
        //  0xFF Maximum speed.
        public byte rSPA;
        //  rFRA: Final grasping force of the gripper (or finger A only if bit rICF is
        //  set).
        //  0x00 Minimum force.
        //  0xFF Maximum force.
        public byte rFRA;
        //  rPRB: Finger B target position. It is only available if bit rICF is set.
        //  0x00 Minimum position (open).
        //  0xFF Maximum position (close).
        public byte rPRB;
        //  rSPB: Finger B speed. It is only available if bit rICF is set.
        //  Setting a speed will not initiate a motion.
        //  0x00 Minimum speed.
        //  0xFF Maximum speed.
        public byte rSPB;
        //  rFRB: Finger B force. It is only available if bit rICF is set.
        //  0x00 Minimum force.
        //  0xFF Maximum force.
        public byte rFRB;
        //  rPRC: Finger C target position. It is only available if bit rICF is set.
        //  0x00 Minimum position (open).
        //  0xFF Maximum position (close).
        public byte rPRC;
        //  rSPC: Finger C speed. It is only available if bit rICF is set.
        //  Setting a speed will not initiate a motion.
        //  0x00 Minimum speed.
        //  0xFF Maximum speed.
        public byte rSPC;
        //  rFRC: Finger C force. It is only available if bit rICF is set.
        //  0x00 Minimum force.
        //  0xFF Maximum force.
        public byte rFRC;
        //  rPRS: Scissor axis target position. It is only applied if the Individual
        //  Control of Scissor option is selected (bit rICS is set).
        //  0x00 Minimum position (open).
        //  0xFF Maximum position (close).
        public byte rPRS;
        //  rSPS: Scissor axis speed. It is only applied if the Individual
        //  Control of Scissor option is selected (bit rICS is set).
        //  0x00 Minimum speed.
        //  0xFF Maximum speed.
        public byte rSPS;
        //  rFRS: Scissor axis force. It is only applied if the Individual
        //  Control of Scissor option is selected (bit rICS is set).
        //  0x00 Minimum force.
        //  0xFF Maximum force.
        public byte rFRS;

        public Robotiq3FGripperRobotOutputMsg()
        {
            this.rACT = 0;
            this.rMOD = 0;
            this.rGTO = 0;
            this.rATR = 0;
            this.rGLV = 0;
            this.rICF = 0;
            this.rICS = 0;
            this.rPRA = 0;
            this.rSPA = 0;
            this.rFRA = 0;
            this.rPRB = 0;
            this.rSPB = 0;
            this.rFRB = 0;
            this.rPRC = 0;
            this.rSPC = 0;
            this.rFRC = 0;
            this.rPRS = 0;
            this.rSPS = 0;
            this.rFRS = 0;
        }

        public Robotiq3FGripperRobotOutputMsg(byte rACT, byte rMOD, byte rGTO, byte rATR, byte rGLV, byte rICF, byte rICS, byte rPRA, byte rSPA, byte rFRA, byte rPRB, byte rSPB, byte rFRB, byte rPRC, byte rSPC, byte rFRC, byte rPRS, byte rSPS, byte rFRS)
        {
            this.rACT = rACT;
            this.rMOD = rMOD;
            this.rGTO = rGTO;
            this.rATR = rATR;
            this.rGLV = rGLV;
            this.rICF = rICF;
            this.rICS = rICS;
            this.rPRA = rPRA;
            this.rSPA = rSPA;
            this.rFRA = rFRA;
            this.rPRB = rPRB;
            this.rSPB = rSPB;
            this.rFRB = rFRB;
            this.rPRC = rPRC;
            this.rSPC = rSPC;
            this.rFRC = rFRC;
            this.rPRS = rPRS;
            this.rSPS = rSPS;
            this.rFRS = rFRS;
        }

        public static Robotiq3FGripperRobotOutputMsg Deserialize(MessageDeserializer deserializer) => new Robotiq3FGripperRobotOutputMsg(deserializer);

        private Robotiq3FGripperRobotOutputMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.rACT);
            deserializer.Read(out this.rMOD);
            deserializer.Read(out this.rGTO);
            deserializer.Read(out this.rATR);
            deserializer.Read(out this.rGLV);
            deserializer.Read(out this.rICF);
            deserializer.Read(out this.rICS);
            deserializer.Read(out this.rPRA);
            deserializer.Read(out this.rSPA);
            deserializer.Read(out this.rFRA);
            deserializer.Read(out this.rPRB);
            deserializer.Read(out this.rSPB);
            deserializer.Read(out this.rFRB);
            deserializer.Read(out this.rPRC);
            deserializer.Read(out this.rSPC);
            deserializer.Read(out this.rFRC);
            deserializer.Read(out this.rPRS);
            deserializer.Read(out this.rSPS);
            deserializer.Read(out this.rFRS);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.rACT);
            serializer.Write(this.rMOD);
            serializer.Write(this.rGTO);
            serializer.Write(this.rATR);
            serializer.Write(this.rGLV);
            serializer.Write(this.rICF);
            serializer.Write(this.rICS);
            serializer.Write(this.rPRA);
            serializer.Write(this.rSPA);
            serializer.Write(this.rFRA);
            serializer.Write(this.rPRB);
            serializer.Write(this.rSPB);
            serializer.Write(this.rFRB);
            serializer.Write(this.rPRC);
            serializer.Write(this.rSPC);
            serializer.Write(this.rFRC);
            serializer.Write(this.rPRS);
            serializer.Write(this.rSPS);
            serializer.Write(this.rFRS);
        }

        public override string ToString()
        {
            return "Robotiq3FGripperRobotOutputMsg: " +
            "\nrACT: " + rACT.ToString() +
            "\nrMOD: " + rMOD.ToString() +
            "\nrGTO: " + rGTO.ToString() +
            "\nrATR: " + rATR.ToString() +
            "\nrGLV: " + rGLV.ToString() +
            "\nrICF: " + rICF.ToString() +
            "\nrICS: " + rICS.ToString() +
            "\nrPRA: " + rPRA.ToString() +
            "\nrSPA: " + rSPA.ToString() +
            "\nrFRA: " + rFRA.ToString() +
            "\nrPRB: " + rPRB.ToString() +
            "\nrSPB: " + rSPB.ToString() +
            "\nrFRB: " + rFRB.ToString() +
            "\nrPRC: " + rPRC.ToString() +
            "\nrSPC: " + rSPC.ToString() +
            "\nrFRC: " + rFRC.ToString() +
            "\nrPRS: " + rPRS.ToString() +
            "\nrSPS: " + rSPS.ToString() +
            "\nrFRS: " + rFRS.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
