//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Robotiq3fGripperArticulated
{
    [Serializable]
    public class Robotiq3FGripperRobotInputMsg : Message
    {
        public const string k_RosMessageName = "robotiq_3f_gripper_articulated_msgs/Robotiq3FGripperRobotInput";
        public override string RosMessageName => k_RosMessageName;

        //  gACT : Initialization status, echo of the rACT bit (activation bit).
        //  0x0 - Gripper reset.
        //  0x1 - Gripper activation.
        public byte gACT;
        //  gMOD : Operation mode status, echo of the rMOD bits (grasping mode requested).
        //  0x00 - Basic mode.
        //  0x01 - Pinch mode.
        //  0x02 - Wide mode.
        //  0x03 - Scissor mode.
        public byte gMOD;
        //  gGTO : Action status. echo of the rGTO bit (go to bit).
        //  0x0 - Stopped (or performing activation / grasping mode change / automatic release)
        //  0x1 - Go to Position Request
        public byte gGTO;
        //  gIMC : Gripper status, returns the current status of the Gripper.
        //  0x00 - Gripper is in reset (or automatic release) state. See Fault status if Gripper is activated.
        //  0x01 - Activation is in progress.
        //  0x02 - Mode change is in progress.
        //  0x03 - Activation and mode change are completed.
        public byte gIMC;
        //  gSTA : Motion status, returns the current motion of the Gripper fingers.
        //  0x00 - Gripper is in motion towards requested position (only meaningful if gGTO = 1)
        //  0x01 - Gripper is stopped. One or two fingers stopped before requested position
        //  0x02 - Gripper is stopped. All fingers stopped before requested position
        //  0x03 - Gripper is stopped. All fingers reached requested position
        public byte gSTA;
        //  gDTA : Finger A object detection status returns information on possible object contact from finger A.
        //  0x00 - Finger A is in motion (only meaningful if gGTO = 1).
        //  0x01 - Finger A has stopped due to a contact while opening.
        //  0x02 - Finger A has stopped due to a contact while closing.
        //  0x03 - Finger A is at requested position.
        public byte gDTA;
        //  gDTB : Finger B object detection status returns information on possible object contact from finger B.
        //  0x00 - Finger B is in motion (only meaningful if gGTO = 1).
        //  0x01 - Finger B has stopped due to a contact while opening.
        //  0x02 - Finger B has stopped due to a contact while closing.
        //  0x03 - Finger B is at requested position.
        public byte gDTB;
        //  gDTC : Finger C object detection status returns information on possible object contact from finger A.
        //  0x00 - Finger C is in motion (only meaningful if gGTO = 1).
        //  0x01 - Finger C has stopped due to a contact while opening.
        //  0x02 - Finger C has stopped due to a contact while closing.
        //  0x03 - Finger C is at requested position.
        public byte gDTC;
        //  gDTS : Scissor object detection status returns information on possible object contact from scissor.
        //  0x00 - Scissor is in motion (only meaningful if gGTO = 1).
        //  0x01 - Scissor has stopped due to a contact while opening.
        //  0x02 - Scissor has stopped due to a contact while closing.
        //  0x03 - Scissor is at requested position.
        public byte gDTS;
        //  gFLT : Fault status returns general error messages useful for troubleshooting.
        //    0x00 - No fault (fault LED off)
        //    Priority faults (fault LED off)
        //      0x05 - Action delayed, activation (reactivation) must be completed prior to action.
        //      0x06 - Action delayed, mode change must be completed prior to action.
        //      0x07 - The activation bit must be set prior to action.
        //    Minor faults (fault LED continuous red)
        //      0x09 - The communication chip is not ready (may be booting).
        //      0x0A - Changing mode fault, interferences detected on Scissor (for less than 20 sec).
        //      0x0B - Automatic release in progress.
        //    Major faults (fault LED blinking red) - Reset is required
        //      0x0D - Activation fault, verify that no interference or other error occurred.
        //      0x0E - Changing mode fault, interferences detected on Scissor (for more than 20 sec).
        //      0x0F - Automatic release completed. Reset and activation is required.
        public byte gFLT;
        //  gPRA : Echo of the requested position of the Gripper (rPRA),
        //    0x00 is minimum position (full opening) and
        //    0xFF is maximum position (full closing).
        //  If commanding the Gripper in
        //    individual control mode, gPRA is the echo of finger A,
        //    otherwise it is the general position requested to all fingers.
        public byte gPRA;
        //  gPOA : Returns the actual position of the Gripper finger A,
        //    0x00 is minimum position (full opening) and
        //    0xFF is maximum position (full closing).
        public byte gPOA;
        //  gCUA : Returns a value that represents the finger A instantaneous current consumption from 0x00 to 0xFF.
        public byte gCUA;
        //  gPRB : Echo of the requested position of finger B (rPRB),
        //    0x00 is minimum position (full opening) and
        //    0xFF is maximum position (full closing).
        public byte gPRB;
        //  gPOB : Returns the actual position of the Gripper finger B,
        //    0x00 is minimum position (full opening) and
        //    0xFF is maximum position (full closing).
        public byte gPOB;
        //  gCUB : Returns a value that represents the finger B instantaneous current consumption from 0x00 to 0xFF.
        public byte gCUB;
        //  gPRC : Echo of the requested position of finger C (rPRC),
        //    0x00 is minimum position (full opening) and
        //    0xFF is maximum position (full closing).
        public byte gPRC;
        //  gPOC : Returns the actual position of the Gripper finger C,
        //    0x00 is minimum position (full opening) and
        //    0xFF is maximum position (full closing).
        public byte gPOC;
        //  gCUC : Returns a value that represents the finger C instantaneous current consumption from 0x00 to 0xFF.
        public byte gCUC;
        //  gPRS : Echo of the requested position of scissor (rPRS),
        //    0x00 is minimum position (full opening) and
        //    0xFF is maximum position (full closing).
        public byte gPRS;
        //  gPOS : Returns the actual position of the Gripper scissor,
        //    0x00 is minimum position (full opening) and
        //    0xFF is maximum position (full closing).
        public byte gPOS;
        //  gCUS : Returns a value that represents the scissor instantaneous current consumption from 0x00 to 0xFF.
        //    0x00 is ...
        //    0xFF is ...
        public byte gCUS;

        public Robotiq3FGripperRobotInputMsg()
        {
            this.gACT = 0;
            this.gMOD = 0;
            this.gGTO = 0;
            this.gIMC = 0;
            this.gSTA = 0;
            this.gDTA = 0;
            this.gDTB = 0;
            this.gDTC = 0;
            this.gDTS = 0;
            this.gFLT = 0;
            this.gPRA = 0;
            this.gPOA = 0;
            this.gCUA = 0;
            this.gPRB = 0;
            this.gPOB = 0;
            this.gCUB = 0;
            this.gPRC = 0;
            this.gPOC = 0;
            this.gCUC = 0;
            this.gPRS = 0;
            this.gPOS = 0;
            this.gCUS = 0;
        }

        public Robotiq3FGripperRobotInputMsg(byte gACT, byte gMOD, byte gGTO, byte gIMC, byte gSTA, byte gDTA, byte gDTB, byte gDTC, byte gDTS, byte gFLT, byte gPRA, byte gPOA, byte gCUA, byte gPRB, byte gPOB, byte gCUB, byte gPRC, byte gPOC, byte gCUC, byte gPRS, byte gPOS, byte gCUS)
        {
            this.gACT = gACT;
            this.gMOD = gMOD;
            this.gGTO = gGTO;
            this.gIMC = gIMC;
            this.gSTA = gSTA;
            this.gDTA = gDTA;
            this.gDTB = gDTB;
            this.gDTC = gDTC;
            this.gDTS = gDTS;
            this.gFLT = gFLT;
            this.gPRA = gPRA;
            this.gPOA = gPOA;
            this.gCUA = gCUA;
            this.gPRB = gPRB;
            this.gPOB = gPOB;
            this.gCUB = gCUB;
            this.gPRC = gPRC;
            this.gPOC = gPOC;
            this.gCUC = gCUC;
            this.gPRS = gPRS;
            this.gPOS = gPOS;
            this.gCUS = gCUS;
        }

        public static Robotiq3FGripperRobotInputMsg Deserialize(MessageDeserializer deserializer) => new Robotiq3FGripperRobotInputMsg(deserializer);

        private Robotiq3FGripperRobotInputMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.gACT);
            deserializer.Read(out this.gMOD);
            deserializer.Read(out this.gGTO);
            deserializer.Read(out this.gIMC);
            deserializer.Read(out this.gSTA);
            deserializer.Read(out this.gDTA);
            deserializer.Read(out this.gDTB);
            deserializer.Read(out this.gDTC);
            deserializer.Read(out this.gDTS);
            deserializer.Read(out this.gFLT);
            deserializer.Read(out this.gPRA);
            deserializer.Read(out this.gPOA);
            deserializer.Read(out this.gCUA);
            deserializer.Read(out this.gPRB);
            deserializer.Read(out this.gPOB);
            deserializer.Read(out this.gCUB);
            deserializer.Read(out this.gPRC);
            deserializer.Read(out this.gPOC);
            deserializer.Read(out this.gCUC);
            deserializer.Read(out this.gPRS);
            deserializer.Read(out this.gPOS);
            deserializer.Read(out this.gCUS);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.gACT);
            serializer.Write(this.gMOD);
            serializer.Write(this.gGTO);
            serializer.Write(this.gIMC);
            serializer.Write(this.gSTA);
            serializer.Write(this.gDTA);
            serializer.Write(this.gDTB);
            serializer.Write(this.gDTC);
            serializer.Write(this.gDTS);
            serializer.Write(this.gFLT);
            serializer.Write(this.gPRA);
            serializer.Write(this.gPOA);
            serializer.Write(this.gCUA);
            serializer.Write(this.gPRB);
            serializer.Write(this.gPOB);
            serializer.Write(this.gCUB);
            serializer.Write(this.gPRC);
            serializer.Write(this.gPOC);
            serializer.Write(this.gCUC);
            serializer.Write(this.gPRS);
            serializer.Write(this.gPOS);
            serializer.Write(this.gCUS);
        }

        public override string ToString()
        {
            return "Robotiq3FGripperRobotInputMsg: " +
            "\ngACT: " + gACT.ToString() +
            "\ngMOD: " + gMOD.ToString() +
            "\ngGTO: " + gGTO.ToString() +
            "\ngIMC: " + gIMC.ToString() +
            "\ngSTA: " + gSTA.ToString() +
            "\ngDTA: " + gDTA.ToString() +
            "\ngDTB: " + gDTB.ToString() +
            "\ngDTC: " + gDTC.ToString() +
            "\ngDTS: " + gDTS.ToString() +
            "\ngFLT: " + gFLT.ToString() +
            "\ngPRA: " + gPRA.ToString() +
            "\ngPOA: " + gPOA.ToString() +
            "\ngCUA: " + gCUA.ToString() +
            "\ngPRB: " + gPRB.ToString() +
            "\ngPOB: " + gPOB.ToString() +
            "\ngCUB: " + gCUB.ToString() +
            "\ngPRC: " + gPRC.ToString() +
            "\ngPOC: " + gPOC.ToString() +
            "\ngCUC: " + gCUC.ToString() +
            "\ngPRS: " + gPRS.ToString() +
            "\ngPOS: " + gPOS.ToString() +
            "\ngCUS: " + gCUS.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
